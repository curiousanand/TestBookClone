// =============================================================================
// TESTBOOK CLONE - PRISMA DATABASE SCHEMA
// =============================================================================
// Complete database schema for TestBook Clone application
// Supports: Users, Courses, Exams, Tests, Live Classes, Payments, Subscriptions
// =============================================================================

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================================
// ENUMS
// =============================================================================

enum UserRole {
  STUDENT
  INSTRUCTOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  RAZORPAY
  STRIPE
  PAYPAL
  UPI
  CARD
  BANK_TRANSFER
}

enum CourseStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
  COMING_SOON
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

enum ExamType {
  MOCK_TEST
  PRACTICE_TEST
  PREVIOUS_YEAR
  CUSTOM_TEST
  LIVE_TEST
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
  TRUE_FALSE
  DESCRIPTIVE
  NUMERICAL
  FILL_BLANKS
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
  VERY_HARD
}

enum LiveClassStatus {
  SCHEDULED
  LIVE
  COMPLETED
  CANCELLED
  POSTPONED
}

enum TestSeriesType {
  FREE
  PAID
  PREMIUM
}

enum Language {
  ENGLISH
  HINDI
  TAMIL
  TELUGU
  BENGALI
  GUJARATI
  MARATHI
  KANNADA
}

// =============================================================================
// USER MANAGEMENT
// =============================================================================

model User {
  id                String    @id @default(cuid())
  role              UserRole  @default(STUDENT)
  status            UserStatus @default(PENDING_VERIFICATION)
  
  // Profile Information
  username          String?   @unique
  email             String    @unique
  emailVerified     Boolean   @default(false)
  phone             String?   @unique
  phoneVerified     Boolean   @default(false)
  
  // Personal Details
  firstName         String
  lastName          String
  fullName          String
  avatar            String?
  bio               String?
  dateOfBirth       DateTime?
  gender            String?
  
  // Location & Contact
  address           String?
  city              String?
  state             String?
  country           String?   @default("IN")
  zipCode           String?
  
  // Preferences
  language          Language  @default(ENGLISH)
  timezone          String?
  
  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastActiveAt      DateTime?
  
  // Relations
  accounts              Account[]
  sessions              Session[]
  subscriptions         Subscription[]
  payments              Payment[]
  enrollments           CourseEnrollment[]
  progress              UserProgress[]
  testAttempts          TestAttempt[]
  liveClassAttendance   LiveClassAttendance[]
  
  // For Instructors
  instructorClasses     LiveClass[]       @relation("InstructorClasses")
  createdCourses        Course[]          @relation("CourseCreator")
  createdQuestions      Question[]        @relation("QuestionCreator")
  createdTestSeries     TestSeries[]      @relation("TestSeriesCreator")
  
  // Notifications
  notifications         Notification[]
  
  @@index([email])
  @@index([phone])
  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@map("users")
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  password          String? // For credentials provider
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}

// OTP Management for phone/email verification
model Otp {
  id         String   @id @default(cuid())
  identifier String   @unique // phone or email
  otp        String   // hashed OTP
  type       String   @default("phone") // phone or email
  expiresAt  DateTime
  attempts   Int      @default(0)
  verified   Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  @@map("otps")
}

// =============================================================================
// SUBSCRIPTION & PAYMENTS
// =============================================================================

model Subscription {
  id                String             @id @default(cuid())
  userId            String
  status            SubscriptionStatus @default(ACTIVE)
  
  // Plan Details
  planName          String
  planType          String
  amount            Decimal            @db.Decimal(10, 2)
  currency          String             @default("INR")
  billingCycle      String             @default("monthly") // monthly, quarterly, yearly
  
  // Subscription Period
  startDate         DateTime
  endDate           DateTime
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  
  // Features & Limits
  features          Json
  limits            Json
  
  // Metadata
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id])
  payments          Payment[]
  
  @@map("subscriptions")
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  subscriptionId    String?
  
  // Payment Details
  amount            Decimal       @db.Decimal(10, 2)
  currency          String        @default("INR")
  status            PaymentStatus @default(PENDING)
  paymentMethod     PaymentMethod
  
  // External Payment Info
  razorpayOrderId   String?
  razorpayPaymentId String?
  stripePaymentId   String?
  transactionId     String?
  
  // Item Information
  itemType          String        // course, test_series, subscription, live_class
  itemId            String
  description       String?
  
  // Metadata
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  user              User          @relation(fields: [userId], references: [id])
  subscription      Subscription? @relation(fields: [subscriptionId], references: [id])
  
  @@map("payments")
}

// =============================================================================
// COURSE MANAGEMENT
// =============================================================================

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  icon        String?
  color       String?
  parentId    String?
  sortOrder   Int       @default(0)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  courses     Course[]
  
  @@map("categories")
}

model Course {
  id              String       @id @default(cuid())
  title           String
  slug            String       @unique
  description     String?
  shortDescription String?
  thumbnail       String?
  previewVideo    String?
  
  // Course Details
  price           Decimal      @db.Decimal(10, 2) @default(0)
  originalPrice   Decimal?     @db.Decimal(10, 2)
  currency        String       @default("INR")
  isFree          Boolean      @default(false)
  
  // Course Metadata
  level           CourseLevel  @default(BEGINNER)
  language        Language     @default(ENGLISH)
  status          CourseStatus @default(DRAFT)
  isPublished     Boolean      @default(false)
  estimatedHours  Int?
  tags            String[]
  
  // SEO & Marketing
  metaTitle       String?
  metaDescription String?
  
  // Relations
  categoryId      String
  instructorId    String
  
  category        Category     @relation(fields: [categoryId], references: [id])
  instructor      User         @relation("CourseCreator", fields: [instructorId], references: [id])
  
  lessons         Lesson[]
  enrollments     CourseEnrollment[]
  progress        UserProgress[]
  
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  @@map("courses")
}

model Lesson {
  id            String    @id @default(cuid())
  courseId      String
  title         String
  slug          String
  description   String?
  content       String?   @db.Text
  
  // Video Content
  videoUrl      String?
  videoDuration Int?      // in seconds
  
  // Lesson Metadata
  chapterNumber Int?
  lessonNumber  Int       @default(1)
  sortOrder     Int       @default(0)
  isFree        Boolean   @default(false)
  isPublished   Boolean   @default(false)
  
  // Resources
  attachments   Json?
  watchTime     Int?      // minimum watch time in seconds
  
  // Relations
  course        Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  progress      UserProgress[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("lessons")
}

model CourseEnrollment {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  enrolledAt    DateTime  @default(now())
  completedAt   DateTime?
  progressPercent Int     @default(0)
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  
  @@unique([userId, courseId])
  @@map("course_enrollments")
}

model UserProgress {
  id            String    @id @default(cuid())
  userId        String
  courseId      String
  lessonId      String
  
  // Progress Tracking
  isCompleted   Boolean   @default(false)
  watchedDuration Int     @default(0) // in seconds
  lastWatchedAt DateTime?
  completedAt   DateTime?
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  course        Course    @relation(fields: [courseId], references: [id])
  lesson        Lesson    @relation(fields: [lessonId], references: [id])
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@unique([userId, lessonId])
  @@map("user_progress")
}

// =============================================================================
// EXAMINATION SYSTEM
// =============================================================================

model Exam {
  id              String      @id @default(cuid())
  title           String
  description     String?
  slug            String      @unique
  type            ExamType    @default(MOCK_TEST)
  
  // Exam Configuration
  categoryId      String?
  price           Decimal     @db.Decimal(10, 2) @default(0)
  originalPrice   Decimal?    @db.Decimal(10, 2)
  isFree          Boolean     @default(true)
  isPublished     Boolean     @default(false)
  
  // Exam Schedule
  startDate       DateTime?
  endDate         DateTime?
  
  // Exam Details
  examCode        String?     @unique
  totalMarks      Int         @default(100)
  passingMarks    Int         @default(40)
  duration        Int         // in minutes
  instructions    String?     @db.Text
  
  // Settings
  allowCalculator Boolean     @default(false)
  allowNegativeMarking Boolean @default(true)
  randomizeQuestions Boolean   @default(true)
  randomizeOptions Boolean    @default(true)
  showResultsImmediately Boolean @default(true)
  
  // Relations
  testSeries      TestSeries[]
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  
  @@map("exams")
}

model TestSeries {
  id              String         @id @default(cuid())
  title           String
  description     String?
  slug            String         @unique
  type            TestSeriesType @default(FREE)
  
  // Test Configuration
  examId          String
  creatorId       String
  price           Decimal        @db.Decimal(10, 2) @default(0)
  originalPrice   Decimal?       @db.Decimal(10, 2)
  isFree          Boolean        @default(true)
  isPublished     Boolean        @default(false)
  
  // Test Schedule
  estimatedHours  Int?
  validityDays    Int?           @default(365)
  
  // Test Settings
  totalQuestions  Int            @default(0)
  totalMarks      Int            @default(100)
  duration        Int            // in minutes
  passingMarks    Int            @default(40)
  allowRetakes    Boolean        @default(true)
  maxAttempts     Int?
  showAnswers     Boolean        @default(true)
  showExplanations Boolean       @default(true)
  randomizeQuestions Boolean     @default(false)
  negativeMarking Boolean        @default(true)
  negativeMarkingRatio Decimal   @db.Decimal(3, 2) @default(0.25)
  
  // Content
  instructions    String?        @db.Text
  tags            String[]
  language        Language       @default(ENGLISH)
  
  // Analytics
  averageScore    Decimal?       @db.Decimal(5, 2)
  totalAttempts   Int            @default(0)
  
  // Relations
  exam            Exam           @relation(fields: [examId], references: [id])
  creator         User           @relation("TestSeriesCreator", fields: [creatorId], references: [id])
  questions       Question[]
  attempts        TestAttempt[]
  
  // Timestamps
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@map("test_series")
}

model Question {
  id              String             @id @default(cuid())
  testSeriesId    String
  creatorId       String
  
  // Question Content
  title           String?
  questionText    String             @db.Text
  options         Json               // Array of options for MCQ
  correctAnswer   Json               // Correct answer(s)
  explanation     String?            @db.Text
  
  // Question Metadata
  type            QuestionType       @default(MULTIPLE_CHOICE)
  difficulty      QuestionDifficulty @default(MEDIUM)
  marks           Decimal            @db.Decimal(4, 2) @default(1)
  negativeMarks   Decimal            @db.Decimal(4, 2) @default(0.25)
  
  // Content Organization
  subject         String?
  topic           String?
  subtopic        String?
  tags            String[]
  language        Language           @default(ENGLISH)
  
  // Media & Resources
  image           String?
  audio           String?
  video           String?
  
  // Question Analytics
  totalAttempts   Int                @default(0)
  correctAttempts Int                @default(0)
  averageTime     Int?               // in seconds
  difficultyLevel Decimal?           @db.Decimal(3, 2) // calculated difficulty
  
  // Status & Moderation
  isActive        Boolean            @default(true)
  isVerified      Boolean            @default(false)
  verifiedAt      DateTime?
  verifiedBy      String?
  
  // Relations
  testSeries      TestSeries         @relation(fields: [testSeriesId], references: [id])
  creator         User               @relation("QuestionCreator", fields: [creatorId], references: [id])
  attempts        QuestionAttempt[]
  
  // Timestamps
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  
  @@map("questions")
}

model TestAttempt {
  id              String    @id @default(cuid())
  userId          String
  testSeriesId    String
  
  // Attempt Details
  startedAt       DateTime  @default(now())
  submittedAt     DateTime?
  completedAt     DateTime?
  timeSpent       Int       @default(0) // in seconds
  
  // Results
  totalQuestions  Int       @default(0)
  attemptedQuestions Int    @default(0)
  correctAnswers  Int       @default(0)
  incorrectAnswers Int      @default(0)
  skippedQuestions Int      @default(0)
  score           Decimal   @db.Decimal(6, 2) @default(0)
  percentage      Decimal   @db.Decimal(5, 2) @default(0)
  
  // Rankings & Analytics
  rank            Int?
  percentile      Decimal?  @db.Decimal(5, 2)
  isPassed        Boolean   @default(false)
  
  // Attempt Settings
  questionsOrder  Json?     // Order of questions if randomized
  
  // Relations
  user            User      @relation(fields: [userId], references: [id])
  testSeries      TestSeries @relation(fields: [testSeriesId], references: [id])
  questionAttempts QuestionAttempt[]
  
  @@map("test_attempts")
}

model QuestionAttempt {
  id            String      @id @default(cuid())
  testAttemptId String
  questionId    String
  
  // Response Details
  userAnswer    Json?       // User's selected answer(s)
  isCorrect     Boolean     @default(false)
  isSkipped     Boolean     @default(false)
  isMarked      Boolean     @default(false) // marked for review
  timeTaken     Int         @default(0) // in seconds
  
  // Scoring
  marksAwarded  Decimal     @db.Decimal(4, 2) @default(0)
  
  // Relations
  testAttempt   TestAttempt @relation(fields: [testAttemptId], references: [id])
  question      Question    @relation(fields: [questionId], references: [id])
  
  // Timestamps
  createdAt     DateTime    @default(now())
  
  @@unique([testAttemptId, questionId])
  @@map("question_attempts")
}

// =============================================================================
// LIVE CLASSES
// =============================================================================

model LiveClass {
  id              String            @id @default(cuid())
  title           String
  description     String?
  
  // Class Details
  instructorId    String
  categoryId      String?
  price           Decimal           @db.Decimal(10, 2) @default(0)
  isFree          Boolean           @default(true)
  
  // Schedule
  scheduledAt     DateTime
  duration        Int               // in minutes
  timezone        String            @default("Asia/Kolkata")
  
  // Class Configuration
  maxParticipants Int?              @default(100)
  language        Language          @default(ENGLISH)
  status          LiveClassStatus   @default(SCHEDULED)
  
  // Meeting Details
  meetingId       String?
  meetingUrl      String?
  meetingPassword String?
  recordingUrl    String?
  
  // Content & Resources
  materials       Json?
  tags            String[]
  
  // Relations
  instructor      User              @relation("InstructorClasses", fields: [instructorId], references: [id])
  attendance      LiveClassAttendance[]
  
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  @@map("live_classes")
}

model LiveClassAttendance {
  id            String    @id @default(cuid())
  userId        String
  liveClassId   String
  
  // Attendance Details
  joinedAt      DateTime  @default(now())
  leftAt        DateTime?
  duration      Int       @default(0) // in seconds
  isPresent     Boolean   @default(true)
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  liveClass     LiveClass @relation(fields: [liveClassId], references: [id])
  
  @@unique([userId, liveClassId])
  @@map("live_class_attendance")
}

// =============================================================================
// NOTIFICATIONS
// =============================================================================

model Notification {
  id            String    @id @default(cuid())
  userId        String
  
  // Notification Content
  type          String    // email_verification, course_update, test_reminder, etc.
  title         String
  message       String    @db.Text
  
  // Notification Metadata
  isRead        Boolean   @default(false)
  readAt        DateTime?
  
  // Optional Data
  actionUrl     String?
  actionText    String?
  metadata      Json?
  
  // Relations
  user          User      @relation(fields: [userId], references: [id])
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@map("notifications")
}

// =============================================================================
// INDEXES (Added within respective models above)
// =============================================================================